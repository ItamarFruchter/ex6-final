itamar.f
ohadbenor

FILE DESCRIPTION:


=============================
=      File description     =
=============================

package oop.ex6.main
	
	Sjavac.java - the class that holds the main method. should get as an input a file
		source, and analyze whether it is a good Sjava file or not.
	
	FileProcessor.java - process files and turns their lines into array of Strings

package oop.ex6.general 

	IllegalCodeException.java - Represents any exception which should result in the S-java 
		code not working.

	ReservedWord.java - Represents all the reserved words in S-java.

package oop.ex6.variables

	Modifier.java -  enum. All the modifier types in S-java.

	Type.java - enum. All the types of members in S-java.

	Member.java - A variable in S-java.

	MemberFactory.java - this class creates samples of members.

	ChangeFinalMemberValueException.java - Arises whenever a code tries to modify a final 
		member's value.

	InvalidTypeException.java - Arises whenever an invalid type is entered.

	InvalidModifierException.java - Arises whenever an illegal modifier is given.

	IllegalNameException.java - Arises whenever a illegal name is given.

	MemberAlreadyExistsException.java - Arises whenever we try to initiate a member that 
		already exists in the local scope.

	NonInitiallizedFinalMemberException.java - Arises whenever a final member is created 
		without a value.

	NonValidValueException.java - Arises when the value given to a parameter was not legal.

	ValueWithoutTypeException.java - Arises when the value to assign is not a legal value of
		any existing type.

package oop.ex6.blockAnalayzer

	Block.java - Represents any block in S-java.

	MainBlock.java - Represents the whole code block.

	MethodBlock.java - this class represents a method block.

	NonMethodBlock.java - A non-method block. In the current build - an if block or while 
		block.

	BlockFactory.java - A factory class which can create any known block type.

	LineType - enum. holds all the possible line types in S-java and their regEx patterns.

	NonValidConditionException.java - Arises whenever a non valid condition is given to a non 
		method block.

	MissingReturnStatementException.java - Arises when there is no return statement at the end
		of a method.

	MeaninglessLineException.java - Arises whenever there is a line that don't fit any line type.

	InvalidMethodNameException.java - Arises whenever a invalid name is given to a method.

	IllegalBlockDeclerationScopeException.java - Arises whenever the code contains a deceleration 
		of a non-method block in the highest scope.

	IllegalMethodDeclerationLocationException.java - Arises whenever a method is declared not from 
		the most global scope.

	IllegalMethodCallScopeException.java - Arises whenever a method is called from the highest scope.

	ReturnStatementScopeException.java - Arises whenever a return statement exist outside a method.

	UnclosedBlockException.java - Arises whenever the code contains an unclosed block 
		(not enough '}').

	UnknownBlockTypeException.java - Arises whenever an unknown block is declared.

	UnknownMemberNameException.java - Arises whenever an unknown member is accessed through 
		assignment.

=============================
=          Design           =
=============================
Our design of the S-java compiler was chosen with extra thought to the modularity principal,
meaning our design was meant to make it easy to implement any new change to the S-java language
and implement it in the compiler. For example, although currently the language supports only
one type of modifier (final), we chose to handle modifiers as a enum which to we can add as 
many new modifiers as we wish, only by adding them to the enum and adding their functionality
to the Member class.

We chose to create objects to represent the code's variables, but we decided to hold only
information relevant to the code checking. For example, we chose not to save the actual value
of the variable, but instead just note whether it has a value or not. This decision lead us
to initialize some members with a default type of the right type only to make them initialized
(for lines such as 'int a = b' with b being an int already generated).

The actual analysis of the code happens for each block separately, with two methods:
shallowProcessing runs over all the code lines, creates all of this scope's variables and 
inner blocks (with minimal processing - only checking the correctness of the deceleration line
and the structure (ends with '}').
deepProcessing runs over every inner block and runs it's shallow and then deep processing.
This way, we created (using the given code lines) the mainBlock (one and only) which is the
block of the full code. This block now can be processed - shallow processing it will generate
all global variables and methods (after the creation sends them both the full method list and
the full global members list). Deep processing the main block will start a chain creation and
processing of the whole code.

The way the shallow processing was implemented in Block (the general type) was meant to enhance
the modularity too - this method calls sub methods ('handle____', which handles a line of type 
'_____'), which if we want to change the way a certain block handles a certain line type we
don't need to override the hole shallowProcess procedure but only the handleSOMTHING() method.

The modules we chose to create and their purpose are:
main -  Handles the input (file path), and extracts the text out of it (as a String[]).
general - Few classes all the modules should know.
variable - A module which holds everything needed to generate and handle variables in S-java.
			Contains relevant classes, enums and exception types. It's main purpose is the 
			Member.class class.
blockAnalayzer - A module which holds every needed object to generate and handle block object.
					Contains relevant classes, enums and exception types. It's main purpose
					is the Block.class class and it's inheriting classes - MethodBlock, 
					NonMethodBlock and MainBlock.
 
=============================
=  Implementation details   =
=============================
We found a lot of the functionalities we wanted to have were well fitted to the enum objects.
A variable type, for example, is implemented as an enum file with all of the known types 
known by S-java.

We used regular expressions in many places in this exercise, for example to check the type of
a line using it's structure, determining whether a certain string can be a value of a certain
variable type or not, etc.


=============================
=    Answers to questions   =
=============================
error handling:
	first, we created a general type of error - IllegalCodeException which has a field for
	holding an informative message, an empty constructor (which is never used) and a constructor 
	that gets an error of its own type and a line number, that update the informative message to
	show both informative reason for why the code is illegal and also in what line is the first
	problem. now you are probably wondering from where we get our informative messages.
	for each end every possible reason for the code being illegal we created an exception of 
	it's own that, as you probably already guessed, extends IllegalCodeException. each
	of those exception holds it's own informative message and when we create an error of its
	type we set this message as the informative message of the IllegaCodeException he is.
	afterwards, the line is thrown up to a place that can tell her from which line it was
	created, and then we catch it, constructs a new error via the constructor of 
	IllegalCodeException with the line number, which holds the informative message from
	the "lower" exception and adds to it the line number. then, we throw the exception up 
	until it gets to our main methods, then we print via system.out 1 and via system.err
	the informative message we got from the exception creating process.		

objected oriented design:
	In order to modify our code to new types of value all we have to do is to create another
	instance of type in the Type enum. that mean we will have to create a regEx 
	pattern that holds the pattern of how a value looks like, a string representation,
	a default value and handle some cases in the Type enum. we won't have to touch
	any other class.
	
	Importing methods and global variables from one s-Java to another one - 
	In order to do so we will create a getter in the main block for the array of local members 
	(which are the global of the whole file) array of itself and a getter for the array  
	contained blocks which hold all the blocks that are in the main block and therefore define
	methods. in order to perform the import itself, we will create another constructor for
	main block which will receive in addition to its own code lines both of the getters we
	explained about above, so he will initiate his relevant fields with them. to conclude,
	all we have to do is to define two getters and a new constructor. WOW! WHAT A DESIGN!!
	
	Implementing Arrays to S-java - 
	In order to create an general array (an array of any known primitive S-java type) we will
	need to define a new class in the variable's package: The new class will contain an array
	of members, a type, a size and a name. It will hold a methods for adding an element (member)
	which will be possible only if the types match, according to location in the array (recieve
	an int - the index in the array, and a member - the member to add). Another critical method
	will be one that checks whether a specific cell is initialized with a value.
	We will also need to add some line types we can recognize - a line for declaring an array,
	retrieving members from an array (specifically make the regex which recognizes raw values
	and names also allow brackets for lines like 'int a = A(1)').
	
two main regEx use:
1.	when we tried to analyze for each line what type of line it is, we created a regEx 
	pattern	that describes what each type of line should contain. for example, a line 
	that assigns value to a member of our code is of the pattern: 
	"\\s*\\w+\\s*=\\s*[\\w\"\\.']+\\s*;\\s*". this pattern says "[as many spaces as we want]
	[at least one word char][as many spaces as we want]	['=' char][at least one value char]
	[as many spaces as we want][';' char][as many spaces as we want]"

2.	when we wanted to check if a certain value is a valid value of a certain type of 
	value we used a regEx pattern of each type's value demands. for example, for the type
	Boolean we used the pattern: "\\s*((-?\\d+(\\.\\d+)?)|true|false)\\s*".
	this pattern say "[as many spaces as we want](['-' char, maybe]([at least one digit ([
	'.' char followed by at least one digit], maybe)){handle the case of int or double} or
	([true]){reserved word} or ([false]){reserved word}"
	
	
	as we can understand from the description only, the regEx saved us a lot of line code in
	those parts in particular, and in all the code in general. 
		